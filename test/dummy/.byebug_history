c
result
c
send_otp_service(phone_num, notifier)
result
c
send_otp_service(phone_num, notifier)
notifier
phone_num
result
c
s
n
c
e
n
method
n
name
s
n
c
account.check_verification_code_path
account
c
quit
c
session_path('Account::User')
session_path(Account::User)
session_path(User)
resource_name
resource
c
to_adapter.find_first(devise_parameter_filter.filter(tainted_conditions).merge({phone: '1'}))
to_adapter.find_first(devise_parameter_filter.filter(tainted_conditions).merge({phone: nil}))
to_adapter.find_first(devise_parameter_filter.filter(tainted_conditions).merge({phone: nil))
 to_adapter.find_all
 to_adapter
to_adapter.find_first(devise_parameter_filter.filter(tainted_conditions).merge(opts))
devise_parameter_filter.filter(tainted_conditions)
tainted_conditions = {email: "page_lee@qq.com"}
to_adapter.find_first(devise_parameter_filter.filter(tainted_conditions).merge(opts))
devise_parameter_filter.filter(tainted_conditions)
devise_parameter_filter
opts
tainted_conditions
to_adapter
c
where(email: warden_conditions[:login]).first
warden_conditions.find(:login)
warden_conditions.select(:login)
warden_conditions
conditions
self.is_email_address(login)
is_email_address(login)
is_phone_number(login)
c
self.phone?
phone?
is_phone_number 's'
self
is_phone_number
self.is_phone_number
c
@email
@phone
phone
c
winning_strategy.user
opts.fetch(:store, winning_strategy.store?)
winning_strategy.store?
n
user.nil?
s
list
llist
h
show
h
info display
info
where
h
pwd
winning_strategy
n
s
n
s
cs
c
user
n
s
n
s
c
n
c
n
args =nil
defaults[scope]
args
@config[:default_strategies]
n
@locked
n
winning_strategy
 self.winning_strategy
s
args = [{:scope=>:admin, :recall=>"devise/sessions#new"}]
scope
args
n
user(opts.merge(:scope => scope))
opts
n
args
s
n
self.class.controller_path
n
devise_mapping.name
s
request.env['warden']
s
c
warden.authenticate!(auth_options)
self
self.resource
auth_options
auth_optins
c
current_use
current_user
current_admin
